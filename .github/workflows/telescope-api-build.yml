name: Build Telescope API
# https://dev.to/pradumnasaraf/publishing-multi-arch-docker-images-to-ghcr-using-buildx-and-github-actions-2k7j
on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  NAMESPACE: tart-telescope
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-main:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            suffix=-amd64-arm64

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-main-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-main-
            ${{ runner.os }}-buildx-
        env:
          CACHE_COMPRESSION: zstd

      - name: Build and push image (main platforms)
        uses: docker/bake-action@v5
        with:
          workdir: ./software/containers/telescope_api
          targets: image-main
          push: true
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        env:
          BUILDX_CACHE_FROM: type=local,src=/tmp/.buildx-cache
          BUILDX_CACHE_TO: type=local,dest=/tmp/.buildx-cache-new,mode=max

  build-armv7-selfhosted:
    runs-on: [self-hosted, v7]
    continue-on-error: true
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      success: ${{ steps.build.outcome == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            suffix=-armv7

      - name: Ensure cache directory exists
        run: |
          sudo mkdir -p /var/cache/buildx
          sudo chown $USER:$USER /var/cache/buildx

      - name: Get CPU count
        id: cpu-count
        run: echo "count=$(nproc)" >> $GITHUB_OUTPUT

      - name: Build and push image (armv7)
        id: build
        uses: docker/bake-action@v5
        with:
          workdir: ./software/containers/telescope_api
          targets: image-armv7-local
          push: true
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          set: |
            *.args.CPUS=${{ steps.cpu-count.outputs.count }}
            *.args.MAKEFLAGS=-j${{ steps.cpu-count.outputs.count }}
            *.args.CARGO_BUILD_JOBS=${{ steps.cpu-count.outputs.count }}
        env:
          BUILDX_CONFIG_INLINE: |
            [worker.oci]
              max-parallelism = ${{ steps.cpu-count.outputs.count }}
            [worker.containerd]
              max-parallelism = ${{ steps.cpu-count.outputs.count }}

  build-armv7-fallback:
    runs-on: ubuntu-latest
    needs: build-armv7-selfhosted
    if: always() && needs.build-armv7-selfhosted.outputs.success != 'true'
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            suffix=-armv7

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-armv7-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-armv7-
            ${{ runner.os }}-buildx-
        env:
          CACHE_COMPRESSION: zstd

      - name: Build and push image (armv7 fallback)
        uses: docker/bake-action@v5
        with:
          workdir: ./software/containers/telescope_api
          targets: image-armv7
          push: true
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        env:
          BUILDX_CACHE_FROM: type=local,src=/tmp/.buildx-cache
          BUILDX_CACHE_TO: type=local,dest=/tmp/.buildx-cache-new,mode=max

  create-manifest:
    runs-on: ubuntu-latest
    needs: [build-main, build-armv7-selfhosted, build-armv7-fallback]
    if: always() && (needs.build-main.result == 'success' && (needs.build-armv7-selfhosted.result == 'success' || needs.build-armv7-fallback.result == 'success'))
    permissions:
      contents: read
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for manifest
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create and push manifest
        run: |
          for tag in $(echo '${{ steps.meta.outputs.tags }}' | tr ' ' '\n'); do
            echo "Creating manifest for $tag"
            docker buildx imagetools create \
              --tag "$tag" \
              "$tag-amd64-arm64" \
              "$tag-armv7"
          done