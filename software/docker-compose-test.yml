### This set of services is for the TART telescope. It orchestrates the following services:
#
#   RESTful API (api_container)
#   TART web front end app (web_app)
#   RESTful API documentation (api_doc_server). Connect to this via http://localhost:5000.
#   VPN connection to AWS
#
#   Author: Tim Molteno (c) 2019-2024.

services:
    ui: # Port 80 on service tailscale
        image:  ghcr.io/tart-telescope/web_app/viewer-root:main
        depends_on:
            - telescope-api
            - tailscale
        volumes:
            - data-volume:/telescope_data
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
        network_mode: "service:tailscale"
        restart: unless-stopped

    # Port 5000
    telescope-api:
        image: ghcr.io/tart-telescope/sbc_code:v0.1.9.6
        build:
            context: ./containers/telescope_api
        volumes:
            -   ~/tart_web_api_store:/database/ # dir where the sqlite database is stored
            -   ~/telescope_config:/config_data # dir where telescope_config.json and calibratied_antenna_positions.json are expected
            -   data-volume:/telescope_data # shared between containers. serving vis and raw hdf files as static files through nginx
        # Comment the following two lines to disable access to the TART hardware (this allows testing of software on a desktop)
        devices:
           - /dev/spidev0.0
        environment:
            # Change the following env vars or create a .env. You will use this to login to your telescope from the Web UI or CLI.
            - LOGIN_PW=${LOGIN_PW}
            - SECRET_KEY=${SECRET_KEY}
            # Optional environment variables for configuring the telescope
            # - CONFIG_DIR=/config
            # - DATA_ROOT=/telescope_data
            # - LOGLEVEL=DEBUG
        ports:
            - 5000:5000
        restart: unless-stopped
        depends_on:
            - tailscale




volumes:
    # Mounted on each container as /telescope_data, used for raw data and vis data. This is a hardcoded path in each container.
    data-volume-test:
