# DO NOT EDIT! This file is auto-generated from JSON schemas.
# To make changes, edit the schema files and regenerate.

# generated by datamodel-codegen:
#   filename:  fpga.json
#   timestamp: 2025-07-12T03:45:02+00:00
#   version:   0.31.2

from __future__ import annotations
from typing import Annotated, Any
from pydantic import BaseModel, ConfigDict, Field, RootModel
from enum import Enum


class Model(RootModel[Any]):
    root: Any


class AQStream(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    data: float
    """
    Acquisition data register value
    """


class Field512Mb(Enum):
    """
    Report flag if firmware is compiled for 512Mb SDRAM
    """

    integer_0 = 0
    integer_1 = 1


class SdramReady(Enum):
    """
    Report flag for SDRAM
    """

    integer_0 = 0
    integer_1 = 1


class Enabled(Enum):
    """
    Report flag for Acquisition system being enabled
    """

    integer_0 = 0
    integer_1 = 1


class Error(Enum):
    """
    Report flag for Acquisition system error
    """

    integer_0 = 0
    integer_1 = 1


class Overflow(Enum):
    """
    Report flag for Acquisition system overflow
    """

    integer_0 = 0
    integer_1 = 1


class AQSystem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    field_512_mb: Annotated[Field512Mb, Field(alias="512Mb")]
    """
    Report flag if firmware is compiled for 512Mb SDRAM
    """
    sdram_ready: Annotated[SdramReady, Field(alias="SDRAM_ready")]
    """
    Report flag for SDRAM
    """
    enabled: Enabled
    """
    Report flag for Acquisition system being enabled
    """
    error: Error
    """
    Report flag for Acquisition system error
    """
    overflow: Overflow
    """
    Report flag for Acquisition system overflow
    """
    state: Annotated[int, Field(ge=0, le=7)]
    """
    Acquisition system state
    """


class FifoOverflow(Enum):
    """
    FIFO overflow flag
    """

    integer_0 = 0
    integer_1 = 1


class FifoUnderrun(Enum):
    """
    FIFO underrun flag
    """

    integer_0 = 0
    integer_1 = 1


class SpiBusy(Enum):
    """
    SPI busy flag
    """

    integer_0 = 0
    integer_1 = 1


class SPIStats(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    fifo_overflow: Annotated[FifoOverflow, Field(alias="FIFO_overflow")]
    """
    FIFO overflow flag
    """
    fifo_underrun: Annotated[FifoUnderrun, Field(alias="FIFO_underrun")]
    """
    FIFO underrun flag
    """
    spi_busy: SpiBusy
    """
    SPI busy flag
    """


class AcqEn(Enum):
    """
    Acquisition Unit enabled
    """

    integer_0 = 0
    integer_1 = 1


class CapDebug(Enum):
    """
    Capture debug flag
    """

    integer_0 = 0
    integer_1 = 1


class CapEn(Enum):
    """
    Capture enabled flag
    """

    integer_0 = 0
    integer_1 = 1


class State(Enum):
    """
    System state
    """

    integer_0 = 0
    integer_1 = 1


class VizEn(Enum):
    """
    Visibility enabled
    """

    integer_0 = 0
    integer_1 = 1


class VizPend(Enum):
    """
    Visibility pending
    """

    integer_0 = 0
    integer_1 = 1


class SysStats(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    acq_en: AcqEn
    """
    Acquisition Unit enabled
    """
    cap_debug: CapDebug
    """
    Capture debug flag
    """
    cap_en: CapEn
    """
    Capture enabled flag
    """
    state: State
    """
    System state
    """
    viz_en: VizEn
    """
    Visibility enabled
    """
    viz_pend: VizPend
    """
    Visibility pending
    """


class Centre(Enum):
    """
    Acquisition centre flag
    """

    integer_0 = 0
    integer_1 = 1


class Drift(Enum):
    """
    Acquisition drift flag
    """

    integer_0 = 0
    integer_1 = 1


class Invert(Enum):
    """
    Acquisition invert flag
    """

    integer_0 = 0
    integer_1 = 1


class TCCentre(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    centre: Centre
    """
    Acquisition centre flag
    """
    delay: float
    """
    Delay value
    """
    drift: Drift
    """
    Acquisition drift flag
    """
    invert: Invert
    """
    Acquisition invert flag
    """


class Count(Enum):
    """
    Acquisition count flag
    """

    integer_0 = 0
    integer_1 = 1


class Debug(Enum):
    """
    Acquisition debug flag
    """

    integer_0 = 0
    integer_1 = 1


class Shift(Enum):
    """
    Acquisition shift flag
    """

    integer_0 = 0
    integer_1 = 1


class TCDebug(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    count: Count
    """
    Acquisition count flag
    """
    debug: Debug
    """
    Acquisition debug flag
    """
    numantenna: float
    """
    Number of antennas
    """
    shift: Shift
    """
    Acquisition shift flag
    """


class TCStatus(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    delta: float
    """
    Acquisition delta
    """
    phase: float
    """
    Acquisition phase
    """


class Enabled1(Enum):
    """
    TC system enabled flag
    """

    integer_0 = 0
    integer_1 = 1


class Error1(Enum):
    """
    TC system error flag
    """

    integer_0 = 0
    integer_1 = 1


class Locked(Enum):
    """
    TC system locked flag
    """

    integer_0 = 0
    integer_1 = 1


class TCSystem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Enabled1
    """
    TC system enabled flag
    """
    error: Error1
    """
    TC system error flag
    """
    locked: Locked
    """
    TC system locked flag
    """
    source: float
    """
    TC system source
    """


class VXDebug(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    limp: float
    """
    VX debug limp value
    """
    stuck: float
    """
    VX debug stuck value
    """


class VXStatus(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    accessed: float
    """
    VX status accessed
    """
    available: float
    """
    VX status available
    """
    bank: float
    """
    VX status bank
    """
    overflow: float
    """
    VX status overflow
    """


class VXStream(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    data: float
    """
    Byte of data
    """


class VXSystem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    blocksize: float
    """
    VX system blocksize
    """
    enabled: float
    """
    VX system enabled
    """
    overwrite: float
    """
    VX system overwrite
    """


class FPGAStatusResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    hostname: str
    """
    Hostname of the RPI
    """
    timestamp: str
    """
    UTC Timestamp
    """
    aq_stream: Annotated[AQStream, Field(alias="AQ_STREAM")]
    aq_system: Annotated[AQSystem, Field(alias="AQ_SYSTEM")]
    spi_stats: Annotated[SPIStats, Field(alias="SPI_STATS")]
    sys_stats: Annotated[SysStats, Field(alias="SYS_STATS")]
    tc_centre: Annotated[TCCentre, Field(alias="TC_CENTRE")]
    tc_debug: Annotated[TCDebug, Field(alias="TC_DEBUG")]
    tc_status: Annotated[TCStatus, Field(alias="TC_STATUS")]
    tc_system: Annotated[TCSystem, Field(alias="TC_SYSTEM")]
    vx_debug: Annotated[VXDebug, Field(alias="VX_DEBUG")]
    vx_status: Annotated[VXStatus, Field(alias="VX_STATUS")]
    vx_stream: Annotated[VXStream, Field(alias="VX_STREAM")]
    vx_system: Annotated[VXSystem, Field(alias="VX_SYSTEM")]
