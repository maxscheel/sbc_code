# DO NOT EDIT! This file is auto-generated from JSON schemas.
# To make changes, edit the schema files and regenerate.

# generated by datamodel-codegen:
#   filename:  channel.json
#   timestamp: 2025-07-12T03:45:03+00:00
#   version:   0.31.2

from __future__ import annotations
from typing import Annotated, Any
from pydantic import BaseModel, ConfigDict, Field, RootModel
from enum import Enum


class Model(RootModel[Any]):
    root: Any


class Ok(Enum):
    """
    Phase measurement OK flag
    """

    integer_0 = 0
    integer_1 = 1


class PhaseInfo(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    n_samples: Annotated[int, Field(alias="N_samples", ge=0)]
    """
    Number of samples
    """
    measured: float
    """
    Measured phase value
    """
    ok: Ok
    """
    Phase measurement OK flag
    """
    stability: Annotated[float, Field(ge=0.0, le=1.0)]
    """
    Phase stability value
    """
    threshold: Annotated[float, Field(ge=0.0, le=1.0)]
    """
    Phase threshold value
    """


class Ok1(Enum):
    """
    Radio mean OK flag
    """

    integer_0 = 0
    integer_1 = 1


class RadioMean(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    mean: float
    """
    Radio mean value
    """
    ok: Ok1
    """
    Radio mean OK flag
    """
    threshold: Annotated[float, Field(ge=0.0)]
    """
    Radio mean threshold
    """


class Enabled(Enum):
    """
    Channel enabled flag
    """

    integer_0 = 0
    integer_1 = 1


class ChannelInfo(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: Annotated[int, Field(ge=0, le=23)]
    """
    Channel ID
    """
    enabled: Enabled
    """
    Channel enabled flag
    """
    phase: PhaseInfo
    radio_mean: RadioMean
    freq: list[float]
    """
    Frequency array
    """
    power: list[float]
    """
    Power array
    """


class Enabled1(Enum):
    """
    Channel enabled status
    """

    integer_0 = 0
    integer_1 = 1


class ChannelStatus(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    channel_id: Annotated[int, Field(ge=0, le=23)]
    """
    Channel ID
    """
    enabled: Enabled1
    """
    Channel enabled status
    """


class ChannelStatusResponse(RootModel[list[ChannelStatus]]):
    root: list[ChannelStatus]


class ChannelInfoResponse(RootModel[list[ChannelInfo]]):
    root: list[ChannelInfo]


class SingleChannelResponse(RootModel[ChannelInfo]):
    root: ChannelInfo


class ChannelToggleResponse(Enum):
    integer_0 = 0
    integer_1 = 1


class ChannelToggleResponse1(RootModel[dict[str, ChannelToggleResponse]]):
    root: dict[str, ChannelToggleResponse]
