# DO NOT EDIT! This file is auto-generated from JSON schemas.
# To make changes, edit the schema files and regenerate.

# generated by datamodel-codegen:
#   filename:  operation.json
#   timestamp: 2025-07-12T03:44:58+00:00
#   version:   0.31.2

from __future__ import annotations
from typing import Any
from pydantic import BaseModel, ConfigDict, RootModel
from enum import Enum


class Model(RootModel[Any]):
    root: Any


class Mode(Enum):
    """
    Current mode of the telescope
    """

    off = "off"
    diag = "diag"
    raw = "raw"
    vis = "vis"
    vis_save = "vis_save"
    cal = "cal"
    rt_syn_img = "rt_syn_img"


class CurrentModeResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    mode: Mode
    """
    Current mode of the telescope
    """


class Mode1(Enum):
    off = "off"
    diag = "diag"
    raw = "raw"
    vis = "vis"
    vis_save = "vis_save"
    cal = "cal"
    rt_syn_img = "rt_syn_img"


class AvailableModesResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    modes: list[Mode1]
    """
    Available operating modes
    """


class Mode2(Enum):
    """
    Current mode of the telescope
    """

    off = "off"
    diag = "diag"
    raw = "raw"
    vis = "vis"
    vis_save = "vis_save"
    cal = "cal"
    rt_syn_img = "rt_syn_img"


class SetModeResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    mode: Mode2
    """
    Current mode of the telescope
    """


class LoopMode(Enum):
    """
    Current loop mode of the telescope
    """

    loop = "loop"
    single = "single"
    loop_n = "loop_n"


class SetLoopModeResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    loop_mode: LoopMode
    """
    Current loop mode of the telescope
    """


class SetLoopCountResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    loop_mode: LoopMode
    """
    Current loop mode of the telescope
    """


class EmptyResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra="forbid",
    )


class Message(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    description: str
    error: str
    status_code: int


class JWTErrorResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    message: Message
