#!/usr/bin/env python3
"""
Standalone schema sync test that runs outside Docker.

This test verifies that generated Pydantic models are up-to-date with OpenAPI schemas.
It runs outside the Docker test environment since it needs to access Docker to run codegen.

Usage:
    python test_schema_sync_standalone.py
"""

import difflib
import shutil
import subprocess
from pathlib import Path


def normalize_generated_file(content: str) -> list[str]:
    """
    Normalize generated file content by removing timestamp lines and other volatile content.

    Returns list of lines with timestamps and generation metadata filtered out.
    """
    lines = content.splitlines()
    filtered_lines = []

    for line in lines:
        # Skip timestamp and generation metadata lines
        if any(
            skip_pattern in line
            for skip_pattern in [
                "generated by datamodel-codegen:",
                "timestamp:",
                "# generated",
                "Generated on",
                "Generated at",
                "datetime.datetime(",
                "__generated_at__",
                "# automatically generated",
            ]
        ):
            continue

        # Skip empty lines for cleaner comparison
        if line.strip():
            filtered_lines.append(line.rstrip())

    return filtered_lines


def run_codegen_fresh() -> Path:
    """
    Run codegen using Docker and return path to fresh generated models.
    """
    # Create test output directory
    test_output = Path("/tmp/schema_sync_test_models")
    if test_output.exists():
        shutil.rmtree(test_output)
    test_output.mkdir()

    # Build codegen image first
    print("🔨 Building codegen image...")
    build_cmd = ["docker", "compose", "-f", "compose.yml", "build", "codegen"]

    result = subprocess.run(build_cmd, capture_output=True, text=True, timeout=120)
    if result.returncode != 0:
        raise RuntimeError(f"Failed to build codegen image: {result.stderr}")

    # Run codegen
    print("⚙️  Generating fresh models...")
    cmd = [
        "docker",
        "compose",
        "-f",
        "compose.yml",
        "run",
        "--rm",
        "-v",
        f"{test_output}:/app/tart_api/generated_models",
        "codegen",
    ]

    result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
    if result.returncode != 0:
        raise RuntimeError(f"Codegen failed: {result.stderr}")

    return test_output


def test_schema_sync():
    """
    Test that generated models are up-to-date with schemas.
    """
    print("🔍 Testing schema sync...")

    # Paths
    current_models_path = Path("tart_api/generated_models")

    # Skip test if no existing models
    if not current_models_path.exists():
        print("⚠️  No existing generated models found, skipping sync test")
        return True

    # Generate fresh models
    fresh_models_path = run_codegen_fresh()

    try:
        # Compare all Python files
        differences_found = False
        diff_summary = []

        # Get all Python files from both directories
        current_files = set(f.name for f in current_models_path.glob("*.py"))
        fresh_files = set(f.name for f in fresh_models_path.glob("*.py"))

        # Check for added/removed files
        added_files = fresh_files - current_files
        removed_files = current_files - fresh_files

        if added_files:
            differences_found = True
            diff_summary.append(f"New files generated: {', '.join(added_files)}")

        if removed_files:
            differences_found = True
            diff_summary.append(
                f"Files no longer generated: {', '.join(removed_files)}"
            )

        # Compare content of common files
        common_files = current_files & fresh_files

        for filename in sorted(common_files):
            current_file = current_models_path / filename
            fresh_file = fresh_models_path / filename

            # Read and normalize file contents
            try:
                with open(current_file, "r", encoding="utf-8") as f:
                    current_content = f.read()
                with open(fresh_file, "r", encoding="utf-8") as f:
                    fresh_content = f.read()
            except Exception as e:
                differences_found = True
                diff_summary.append(f"Error reading {filename}: {e}")
                continue

            current_lines = normalize_generated_file(current_content)
            fresh_lines = normalize_generated_file(fresh_content)

            if current_lines != fresh_lines:
                differences_found = True

                # Generate detailed diff for debugging
                diff = list(
                    difflib.unified_diff(
                        current_lines,
                        fresh_lines,
                        fromfile=f"current/{filename}",
                        tofile=f"fresh/{filename}",
                        lineterm="",
                    )
                )

                if diff:
                    diff_summary.append(f"\n=== Differences in {filename} ===")
                    diff_summary.extend(diff[:20])  # Limit diff output
                    if len(diff) > 20:
                        diff_summary.append("... (diff truncated)")

        # Report results
        if differences_found:
            error_msg = [
                "❌ Generated models are NOT up-to-date with schemas!",
                "",
                "This means either:",
                "1. Schema files have been updated but models weren't regenerated",
                "2. The codegen process has changed",
                "",
                "To fix this, run: make codegen",
                "",
                "Differences found:",
            ]
            error_msg.extend(diff_summary)

            print("\n".join(error_msg))
            return False

        print("✅ Generated models are up-to-date with schemas")
        return True

    finally:
        # Clean up temporary directory
        if fresh_models_path.exists():
            shutil.rmtree(fresh_models_path)


def test_codegen_smoke():
    """
    Smoke test to ensure codegen can run successfully.
    """
    print("🧪 Running codegen smoke test...")

    try:
        test_output_dir = Path("/tmp/codegen_smoke_test")
        if test_output_dir.exists():
            shutil.rmtree(test_output_dir)
        test_output_dir.mkdir()

        # Build and run codegen
        build_cmd = ["docker", "compose", "-f", "compose.yml", "build", "codegen"]
        result = subprocess.run(build_cmd, capture_output=True, text=True, timeout=120)
        if result.returncode != 0:
            raise RuntimeError(f"Failed to build codegen: {result.stderr}")

        cmd = [
            "docker",
            "compose",
            "-f",
            "compose.yml",
            "run",
            "--rm",
            "-v",
            f"{test_output_dir}:/app/tart_api/generated_models",
            "codegen",
        ]

        result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
        if result.returncode != 0:
            raise RuntimeError(f"Codegen failed: {result.stderr}")

        # Check that files were generated
        generated_files = list(test_output_dir.glob("*.py"))
        if not generated_files:
            raise RuntimeError("No Python files generated")

        print(f"✅ Codegen smoke test passed - generated {len(generated_files)} files")

        # Clean up
        if test_output_dir.exists():
            shutil.rmtree(test_output_dir)

        return True

    except Exception as e:
        print(f"❌ Codegen smoke test failed: {e}")
        return False


def main():
    """Run all schema sync tests."""
    print("🚀 Running schema sync tests...\n")

    try:
        # Change to the correct directory
        script_dir = Path(__file__).parent
        original_cwd = Path.cwd()

        if script_dir.name != "telescope_api":
            print(f"📁 Changing directory to {script_dir}")
            import os

            os.chdir(script_dir)

        # Run tests
        smoke_ok = test_codegen_smoke()
        print()

        sync_ok = test_schema_sync()
        print()

        if smoke_ok and sync_ok:
            print("🎉 All schema sync tests passed!")
            return 0
        else:
            print("💥 Some schema sync tests failed!")
            return 1

    except Exception as e:
        print(f"❌ Schema sync test failed with error: {e}")
        return 1
    finally:
        # Restore original directory
        import os

        os.chdir(original_cwd)


if __name__ == "__main__":
    exit(main())
