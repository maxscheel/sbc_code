# DO NOT EDIT! This file is auto-generated from JSON schemas.
# To make changes, edit the schema files and regenerate.

# generated by datamodel-codegen:
#   filename:  common.json
#   timestamp: 2025-07-19T12:33:16+00:00
#   version:   0.31.2

from __future__ import annotations
from typing import Annotated, Any
from pydantic import BaseModel, ConfigDict, Field, RootModel
from enum import Enum
from datetime import datetime


class Model(RootModel[Any]):
    root: Any


class EmptyResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra="forbid",
    )


class ErrorResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    msg: str


class Message(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    description: str
    error: str
    status_code: int


class JWTErrorResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    message: Message


class JWTAuthHeader(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    authorization: Annotated[
        str,
        Field(
            alias="Authorization",
            pattern="^JWT [A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$",
        ),
    ]


class ChannelIndex(RootModel[int]):
    root: Annotated[int, Field(ge=0, le=23)]


class BinaryFlag(Enum):
    integer_0 = 0
    integer_1 = 1


class TelescopeMode(Enum):
    off = "off"
    diag = "diag"
    raw = "raw"
    vis = "vis"
    vis_save = "vis_save"
    cal = "cal"
    rt_syn_img = "rt_syn_img"


class LoopMode(Enum):
    loop = "loop"
    single = "single"
    loop_n = "loop_n"


class LoopCount(RootModel[int]):
    root: Annotated[int, Field(ge=0, le=100)]


class SampleExponent(RootModel[int]):
    root: Annotated[int, Field(ge=16, le=24)]


class FPGABinaryFlag(Enum):
    integer_0 = 0
    integer_1 = 1


class FPGAStateFlag(RootModel[int]):
    root: Annotated[int, Field(ge=0, le=7)]


class UTCTimestamp(RootModel[datetime]):
    root: datetime


class Hostname(RootModel[str]):
    root: str


class Frequency(RootModel[float]):
    root: Annotated[float, Field(ge=0.0)]


class Coordinate(RootModel[float]):
    root: float


class Altitude(RootModel[float]):
    root: Annotated[float, Field(ge=0.0, le=8848.0)]
    """
    Altitude in meters above sea level (0 to 8848m - Mt. Everest height)
    """


class AntennaPosition(RootModel[list[float]]):
    root: Annotated[list[float], Field(max_length=3, min_length=3)]


class AntennaPositions(RootModel[list[AntennaPosition]]):
    root: list[AntennaPosition]


class Filename(RootModel[str]):
    root: str


class Checksum(RootModel[str]):
    root: str
