# DO NOT EDIT! This file is auto-generated from JSON schemas.
# To make changes, edit the schema files and regenerate.

# generated by datamodel-codegen:
#   filename:  fpga.json
#   timestamp: 2025-07-13T01:08:46+00:00
#   version:   0.31.2

from __future__ import annotations
from typing import Annotated, Any
from pydantic import BaseModel, ConfigDict, Field, RootModel
from enum import Enum
from datetime import datetime


class Model(RootModel[Any]):
    root: Any


class AQStream(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    data: float
    """
    Acquisition data register value
    """


class FPGABinaryFlag(Enum):
    integer_0 = 0
    integer_1 = 1


class EmptyResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra="forbid",
    )


class ErrorResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    msg: str


class Message(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    description: str
    error: str
    status_code: int


class JWTErrorResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    message: Message


class JWTAuthHeader(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    authorization: Annotated[
        str,
        Field(
            alias="Authorization",
            pattern="^JWT [A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$",
        ),
    ]


class ChannelIndex(RootModel[int]):
    root: Annotated[int, Field(ge=0, le=23)]


class BinaryFlag(Enum):
    integer_0 = 0
    integer_1 = 1


class TelescopeMode(Enum):
    off = "off"
    diag = "diag"
    raw = "raw"
    vis = "vis"
    vis_save = "vis_save"
    cal = "cal"
    rt_syn_img = "rt_syn_img"


class LoopMode(Enum):
    loop = "loop"
    single = "single"
    loop_n = "loop_n"


class LoopCount(RootModel[int]):
    root: Annotated[int, Field(ge=0, le=100)]


class SampleExponent(RootModel[int]):
    root: Annotated[int, Field(ge=16, le=24)]


class FPGAStateFlag(RootModel[int]):
    root: Annotated[int, Field(ge=0, le=7)]


class UTCTimestamp(RootModel[datetime]):
    root: datetime


class Hostname(RootModel[str]):
    root: str


class Frequency(RootModel[float]):
    root: Annotated[float, Field(ge=0.0)]


class Coordinate(RootModel[float]):
    root: float


class Altitude(RootModel[float]):
    root: Annotated[float, Field(ge=0.0, le=8848.0)]
    """
    Altitude in meters above sea level (0 to 8848m - Mt. Everest height)
    """


class AntennaPosition(RootModel[list[float]]):
    root: Annotated[list[float], Field(max_length=3, min_length=3)]


class AntennaPositions(RootModel[list[AntennaPosition]]):
    root: list[AntennaPosition]


class Filename(RootModel[str]):
    root: str


class Checksum(RootModel[str]):
    root: str


class SPIStats(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    fifo_overflow: Annotated[FPGABinaryFlag, Field(alias="FIFO_overflow")]
    """
    FIFO overflow flag
    """
    fifo_underrun: Annotated[FPGABinaryFlag, Field(alias="FIFO_underrun")]
    """
    FIFO underrun flag
    """
    spi_busy: FPGABinaryFlag
    """
    SPI busy flag
    """


class SysStats(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    acq_en: FPGABinaryFlag
    """
    Acquisition Unit enabled
    """
    cap_debug: FPGABinaryFlag
    """
    Capture debug flag
    """
    cap_en: FPGABinaryFlag
    """
    Capture enabled flag
    """
    state: FPGABinaryFlag
    """
    System state
    """
    viz_en: FPGABinaryFlag
    """
    Visibility enabled
    """
    viz_pend: FPGABinaryFlag
    """
    Visibility pending
    """


class TCCentre(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    centre: FPGABinaryFlag
    """
    Acquisition centre flag
    """
    delay: float
    """
    Delay value
    """
    drift: FPGABinaryFlag
    """
    Acquisition drift flag
    """
    invert: FPGABinaryFlag
    """
    Acquisition invert flag
    """


class TCDebug(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    count: FPGABinaryFlag
    """
    Acquisition count flag
    """
    debug: FPGABinaryFlag
    """
    Acquisition debug flag
    """
    numantenna: float
    """
    Number of antennas
    """
    shift: FPGABinaryFlag
    """
    Acquisition shift flag
    """


class TCStatus(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    delta: float
    """
    Acquisition delta
    """
    phase: float
    """
    Acquisition phase
    """


class TCSystem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: FPGABinaryFlag
    """
    TC system enabled flag
    """
    error: FPGABinaryFlag
    """
    TC system error flag
    """
    locked: FPGABinaryFlag
    """
    TC system locked flag
    """
    source: float
    """
    TC system source
    """


class VXDebug(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    limp: float
    """
    VX debug limp value
    """
    stuck: float
    """
    VX debug stuck value
    """


class VXStatus(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    accessed: float
    """
    VX status accessed
    """
    available: float
    """
    VX status available
    """
    bank: float
    """
    VX status bank
    """
    overflow: float
    """
    VX status overflow
    """


class VXStream(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    data: float
    """
    Byte of data
    """


class VXSystem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    blocksize: float
    """
    VX system blocksize
    """
    enabled: float
    """
    VX system enabled
    """
    overwrite: float
    """
    VX system overwrite
    """


class AQSystem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    field_512_mb: Annotated[FPGABinaryFlag, Field(alias="512Mb")]
    """
    Report flag if firmware is compiled for 512Mb SDRAM
    """
    sdram_ready: Annotated[FPGABinaryFlag, Field(alias="SDRAM_ready")]
    """
    Report flag for SDRAM
    """
    enabled: FPGABinaryFlag
    """
    Report flag for Acquisition system being enabled
    """
    error: FPGABinaryFlag
    """
    Report flag for Acquisition system error
    """
    overflow: FPGABinaryFlag
    """
    Report flag for Acquisition system overflow
    """
    state: FPGAStateFlag
    """
    Acquisition system state
    """


class FPGAStatusResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    hostname: str
    """
    Hostname of the RPI
    """
    timestamp: str
    """
    UTC Timestamp
    """
    aq_stream: Annotated[AQStream, Field(alias="AQ_STREAM")]
    aq_system: Annotated[AQSystem, Field(alias="AQ_SYSTEM")]
    spi_stats: Annotated[SPIStats, Field(alias="SPI_STATS")]
    sys_stats: Annotated[SysStats, Field(alias="SYS_STATS")]
    tc_centre: Annotated[TCCentre, Field(alias="TC_CENTRE")]
    tc_debug: Annotated[TCDebug, Field(alias="TC_DEBUG")]
    tc_status: Annotated[TCStatus, Field(alias="TC_STATUS")]
    tc_system: Annotated[TCSystem, Field(alias="TC_SYSTEM")]
    vx_debug: Annotated[VXDebug, Field(alias="VX_DEBUG")]
    vx_status: Annotated[VXStatus, Field(alias="VX_STATUS")]
    vx_stream: Annotated[VXStream, Field(alias="VX_STREAM")]
    vx_system: Annotated[VXSystem, Field(alias="VX_SYSTEM")]
